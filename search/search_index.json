{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"faq/","text":"Frequently Asked Questions \u00b6 How can I get the SSHID from my device? \u00b6 From your device execute the following command on your shell: docker exec shellhub agent info this returns your device's SSHID inside a json example \u00b6 { \"sshid\": \"namespace.device_name@address\" }","title":"Faq"},{"location":"faq/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"faq/#how-can-i-get-the-sshid-from-my-device","text":"From your device execute the following command on your shell: docker exec shellhub agent info this returns your device's SSHID inside a json","title":"How can I get the SSHID from my device?"},{"location":"faq/#example","text":"{ \"sshid\": \"namespace.device_name@address\" }","title":"example"},{"location":"introduction/","text":"ShellHub is a modern SSH server for remotely accessing Linux devices via command line (using any SSH client) or web-based user interface. It is intended to be used instead of sshd . Typically, if you want to SSH a Linux device on a local network, you just need to know its IP address. However, in order to access a Linux device from outside the local network, you will have to go through a few inconveniences, such as getting its public IP address and configuring the router. Changing the VPN/firewall configuration can be cumbersome if the device is behind a corporate firewall that does not allow SSH connections. ShellHub provides a way to avoid all these hassles, helping you easily and seamlessly access any Linux device behind firewall and NAT. Overview \u00b6 This introduction section is intended to give a high-level overview of the ShellHub. Click here to view large image There are few basic concepts that are important to understand the ShellHub. Those basic concepts are detailed below: SSH Gateway \u00b6 The SSH gateway is a SSH server which forward connections to the devices running ShellHub's agent. Device \u00b6 An internet-connected device, such as a computer or something more specific like a single-board computer, running ShellHub's agent. Agent \u00b6 ShellHub's agent which must be installed on the device. SSHID \u00b6 SSHID is a unique address to identify a device in the SSH gateway, which must be specified in the following format: <NAMESPACE>.<HOSTNAME>@<SERVER_ADDRESS> Where: <NAMESPACE> : Is the account namespace identifier <HOSTNAME> : Is the device hostname identifier <SERVER_ADDRESS> : Is the ShellHub server instance address identifier Example of SSHID: demo.device-1@cloud.shellhub.io","title":"Introduction"},{"location":"introduction/#overview","text":"This introduction section is intended to give a high-level overview of the ShellHub. Click here to view large image There are few basic concepts that are important to understand the ShellHub. Those basic concepts are detailed below:","title":"Overview"},{"location":"introduction/#ssh-gateway","text":"The SSH gateway is a SSH server which forward connections to the devices running ShellHub's agent.","title":"SSH Gateway"},{"location":"introduction/#device","text":"An internet-connected device, such as a computer or something more specific like a single-board computer, running ShellHub's agent.","title":"Device"},{"location":"introduction/#agent","text":"ShellHub's agent which must be installed on the device.","title":"Agent"},{"location":"introduction/#sshid","text":"SSHID is a unique address to identify a device in the SSH gateway, which must be specified in the following format: <NAMESPACE>.<HOSTNAME>@<SERVER_ADDRESS> Where: <NAMESPACE> : Is the account namespace identifier <HOSTNAME> : Is the device hostname identifier <SERVER_ADDRESS> : Is the ShellHub server instance address identifier Example of SSHID: demo.device-1@cloud.shellhub.io","title":"SSHID"},{"location":"welcome/","text":"The ShellHub is composed of two major parts, the SSH gateway and the device agent . These parts work together to provide a secure SSH connection across the network to Linux-based devices. SSH gateway \u00b6 The ShellHub SSH gateway is a modern SSH server built using the microservices design pattern, meaning that multiple small, isolated services make up the server. It must be installed on any cloud provider like Azure, Google, AWS or DigitalOcean. Device agent \u00b6 The ShellHub device agent which must be installed on the device.","title":"Welcome"},{"location":"welcome/#ssh-gateway","text":"The ShellHub SSH gateway is a modern SSH server built using the microservices design pattern, meaning that multiple small, isolated services make up the server. It must be installed on any cloud provider like Azure, Google, AWS or DigitalOcean.","title":"SSH gateway"},{"location":"welcome/#device-agent","text":"The ShellHub device agent which must be installed on the device.","title":"Device agent"},{"location":"admin-manual/","text":"This manual covers the installation, configuration and management of a self-hosted ShellHub instance. This manual requires you to have a good understanding of Linux and Docker","title":"Introduction"},{"location":"admin-manual/admin-console/","text":"The Admin Console gives you control over the management and settings of a self-hosted ShellHub instance. NOTE Admin Console is only available in ShellHub Enterprise version. ShellHub Admin Console Dashboard \u00b6 When you first log in to the Admin Console, you will land on the Dashboard which will provide an overview of your ShellHub instance.","title":"Admin Console"},{"location":"admin-manual/admin-console/#dashboard","text":"When you first log in to the Admin Console, you will land on the Dashboard which will provide an overview of your ShellHub instance.","title":"Dashboard"},{"location":"admin-manual/configuring/","text":"ShellHub is easy to configure, all configuration is done via environment variables inside the .env.override file located at the root of ShellHub project dir. Environment Variables \u00b6 SHELLHUB_HTTP_PORT \u00b6 The HTTP listen port for the ShellHub web-based GUI, API and Reverse SSH tunnel. Default: 80 SHELLHUB_HTTPS_PORT \u00b6 The HTTPS listen port for the ShellHub web-based GUI, API and Reverse SSH tunnel. Default: 443 SHELLHUB_SSH_PORT \u00b6 The SSH listen port for incoming SSH connections to devices. Default: 22 SHELLHUB_PROXY \u00b6 Set this variable to true if you are running a Layer 4 load balancer with proxy protocol in front of ShellHub. Default: false SHELLHUB_AUTO_SSL \u00b6 Automatic HTTPS with Let's Encrypt Default: false SHELLHUB_REDIRECT_TO_HTTPS \u00b6 Redirect requests from HTTP port to HTTPS port In order to enable HTTPS redirection, you need to have HTTPS enabled Default: false SHELLHUB_DOMAIN \u00b6 Domain of the server Only required if automatic HTTPS is enabled Default: localhost","title":"Configuring"},{"location":"admin-manual/configuring/#environment-variables","text":"","title":"Environment Variables"},{"location":"admin-manual/configuring/#shellhub_http_port","text":"The HTTP listen port for the ShellHub web-based GUI, API and Reverse SSH tunnel. Default: 80","title":"SHELLHUB_HTTP_PORT"},{"location":"admin-manual/configuring/#shellhub_https_port","text":"The HTTPS listen port for the ShellHub web-based GUI, API and Reverse SSH tunnel. Default: 443","title":"SHELLHUB_HTTPS_PORT"},{"location":"admin-manual/configuring/#shellhub_ssh_port","text":"The SSH listen port for incoming SSH connections to devices. Default: 22","title":"SHELLHUB_SSH_PORT"},{"location":"admin-manual/configuring/#shellhub_proxy","text":"Set this variable to true if you are running a Layer 4 load balancer with proxy protocol in front of ShellHub. Default: false","title":"SHELLHUB_PROXY"},{"location":"admin-manual/configuring/#shellhub_auto_ssl","text":"Automatic HTTPS with Let's Encrypt Default: false","title":"SHELLHUB_AUTO_SSL"},{"location":"admin-manual/configuring/#shellhub_redirect_to_https","text":"Redirect requests from HTTP port to HTTPS port In order to enable HTTPS redirection, you need to have HTTPS enabled Default: false","title":"SHELLHUB_REDIRECT_TO_HTTPS"},{"location":"admin-manual/configuring/#shellhub_domain","text":"Domain of the server Only required if automatic HTTPS is enabled Default: localhost","title":"SHELLHUB_DOMAIN"},{"location":"admin-manual/installing/","text":"ShellHub is designed using the microservices design pattern, so that multiple small and isolated services collaborate to provide the server. In order to make it easier to test ShellHub and its features, we have created a Docker Compose environment that brings all of these components up and connects them together on a single machine. System Requirements \u00b6 Before continuing, make sure: Docker Engine and Docker Compose are installed properly. Following ports are open: TCP 80 and TCP 22 . Checkout the latest stable version \u00b6 First checkout the latest stable version ( v0.9.4 ) of ShellHub as follows: git clone -b v0.9.4 https://github.com/shellhub-io/shellhub.git shellhub Now navigate to ShellHub working directory: cd shellhub Generate keys \u00b6 It is required to generate a key pair (private and public) for your ShellHub server instance. make keygen","title":"Installing"},{"location":"admin-manual/installing/#system-requirements","text":"Before continuing, make sure: Docker Engine and Docker Compose are installed properly. Following ports are open: TCP 80 and TCP 22 .","title":"System Requirements"},{"location":"admin-manual/installing/#checkout-the-latest-stable-version","text":"First checkout the latest stable version ( v0.9.4 ) of ShellHub as follows: git clone -b v0.9.4 https://github.com/shellhub-io/shellhub.git shellhub Now navigate to ShellHub working directory: cd shellhub","title":"Checkout the latest stable version"},{"location":"admin-manual/installing/#generate-keys","text":"It is required to generate a key pair (private and public) for your ShellHub server instance. make keygen","title":"Generate keys"},{"location":"admin-manual/managing/","text":"ShellHub comes with a useful scripts for managing a self-hosted ShellHub instance. These scripts are located in bin of ShellHub project dir. ShellHub Enterprise If you are managing a ShellHub Enterprise self-hosted instance, all administrative tasks can be performed via the Admin Console . Each script must be run from the root of ShellHub project dir. Scripts \u00b6 Namespace scripts \u00b6 add-namespace \u00b6 Add namespace to a local running instance of ShellHub. Usage: ./bin/add-namespace <namespace> <owner> del-namespace \u00b6 Delete namespace to a local running instance of ShellHub. Usage: ./bin/del-namespace <namespace> add-user-namespace \u00b6 Add user to specific namespace to a local running instance of ShellHub. Usage: ./bin/add-user-namespace <username> <namespace> del-user-namespace \u00b6 Delete user from a specific namespace to a local running instance of ShellHub. Usage: ./bin/del-user-namespace <username> <namespace> User scripts \u00b6 add-user \u00b6 Add user account to a local running instance of ShellHub. Usage: ./bin/add-user <username> <password> <email> del-user \u00b6 Delete user account from a local running instance of ShellHub. Usage: ./bin/del-user <username> reset-user-password \u00b6 Reset user account password from a local running instance of ShellHub. Usage: ./bin/reset-user-password <username> <password>","title":"Managing"},{"location":"admin-manual/managing/#scripts","text":"","title":"Scripts"},{"location":"admin-manual/managing/#namespace-scripts","text":"","title":"Namespace scripts"},{"location":"admin-manual/managing/#add-namespace","text":"Add namespace to a local running instance of ShellHub. Usage: ./bin/add-namespace <namespace> <owner>","title":"add-namespace"},{"location":"admin-manual/managing/#del-namespace","text":"Delete namespace to a local running instance of ShellHub. Usage: ./bin/del-namespace <namespace>","title":"del-namespace"},{"location":"admin-manual/managing/#add-user-namespace","text":"Add user to specific namespace to a local running instance of ShellHub. Usage: ./bin/add-user-namespace <username> <namespace>","title":"add-user-namespace"},{"location":"admin-manual/managing/#del-user-namespace","text":"Delete user from a specific namespace to a local running instance of ShellHub. Usage: ./bin/del-user-namespace <username> <namespace>","title":"del-user-namespace"},{"location":"admin-manual/managing/#user-scripts","text":"","title":"User scripts"},{"location":"admin-manual/managing/#add-user","text":"Add user account to a local running instance of ShellHub. Usage: ./bin/add-user <username> <password> <email>","title":"add-user"},{"location":"admin-manual/managing/#del-user","text":"Delete user account from a local running instance of ShellHub. Usage: ./bin/del-user <username>","title":"del-user"},{"location":"admin-manual/managing/#reset-user-password","text":"Reset user account password from a local running instance of ShellHub. Usage: ./bin/reset-user-password <username> <password>","title":"reset-user-password"},{"location":"admin-manual/production-deployment/","text":"When running in production you should ensure that you enable SSL For production deployment, there are a few things to modified to make sure your deployment is ready for production usage. Override Docker Compose configuration You can use docker-compose.override.yml file to override different aspects of your deployment instead of editing docker-compose.yml directly in order to avoid conflict with upstream code. Where to store persistent files \u00b6 Default setup \u00b6 By default, persistent files are stored by writting files to disk on the host system using the Docker's internal volume management. Be warned The downside is that files may be hard to locate for tools and applications that run directly on the host system. Production setup \u00b6 In production environment create a data directory on the host system and mount this to a directory visible from inside the container. Recommended for production This places the persistent files in a known location on the host system, and makes it easy for tools and applications on the host system to access the files. To achieve this, put the following in the docker-compose.override.yml file inside ShellHub project dir: version : '3.7' services : mongo : volumes : - /usr/local/mongo/data:/data/db Make sure /usr/local/mongo/data directory exists on the host. Enable SSL \u00b6 This is commonly achieved by running NGINX with your certificates on your Docker host, service or load balancers in-front of the running container. Don't forget to set SHELLHUB_PROXY environment when putting a Layer 4 load balancer with proxy protocol in-front of ShellHub. Automatic HTTPS with Let's Encrypt \u00b6 ShellHub provides automatic HTTPS support using Let's Encrypt with reasonable SSL settings, HTTP/2 and WebSockets support out-of-the-box. Please see SHELLHUB_AUTO_SSL config option. NGINX SSL terminator \u00b6 In case you are using NGINX as SSL terminator instead, make sure to set the SHELLHUB_WEB_PORT to only bind to localhost by adding the following line to the docker-compose.override.yml version : '3.7' services : gateway : ports : - \"127.0.0.1:${SHELLHUB_HTTP_PORT}:80\" Configure NGINX to proxy Websocket connections \u00b6 When using NGINX do not forget to allow websocket traffic to be handled properly. This can be done by adding the following blocks to your nginx configuration. location /ws/ { proxy_pass http://127.0.0.1:<your shellhub http port>; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_read_timeout 86400; } location /ssh/ { proxy_pass http://127.0.0.1:<your shellhub http port>; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_read_timeout 86400; }","title":"Production Deployment"},{"location":"admin-manual/production-deployment/#where-to-store-persistent-files","text":"","title":"Where to store persistent files"},{"location":"admin-manual/production-deployment/#default-setup","text":"By default, persistent files are stored by writting files to disk on the host system using the Docker's internal volume management. Be warned The downside is that files may be hard to locate for tools and applications that run directly on the host system.","title":"Default setup"},{"location":"admin-manual/production-deployment/#production-setup","text":"In production environment create a data directory on the host system and mount this to a directory visible from inside the container. Recommended for production This places the persistent files in a known location on the host system, and makes it easy for tools and applications on the host system to access the files. To achieve this, put the following in the docker-compose.override.yml file inside ShellHub project dir: version : '3.7' services : mongo : volumes : - /usr/local/mongo/data:/data/db Make sure /usr/local/mongo/data directory exists on the host.","title":"Production setup"},{"location":"admin-manual/production-deployment/#enable-ssl","text":"This is commonly achieved by running NGINX with your certificates on your Docker host, service or load balancers in-front of the running container. Don't forget to set SHELLHUB_PROXY environment when putting a Layer 4 load balancer with proxy protocol in-front of ShellHub.","title":"Enable SSL"},{"location":"admin-manual/production-deployment/#automatic-https-with-lets-encrypt","text":"ShellHub provides automatic HTTPS support using Let's Encrypt with reasonable SSL settings, HTTP/2 and WebSockets support out-of-the-box. Please see SHELLHUB_AUTO_SSL config option.","title":"Automatic HTTPS with Let's Encrypt"},{"location":"admin-manual/production-deployment/#nginx-ssl-terminator","text":"In case you are using NGINX as SSL terminator instead, make sure to set the SHELLHUB_WEB_PORT to only bind to localhost by adding the following line to the docker-compose.override.yml version : '3.7' services : gateway : ports : - \"127.0.0.1:${SHELLHUB_HTTP_PORT}:80\"","title":"NGINX SSL terminator"},{"location":"admin-manual/production-deployment/#configure-nginx-to-proxy-websocket-connections","text":"When using NGINX do not forget to allow websocket traffic to be handled properly. This can be done by adding the following blocks to your nginx configuration. location /ws/ { proxy_pass http://127.0.0.1:<your shellhub http port>; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_read_timeout 86400; } location /ssh/ { proxy_pass http://127.0.0.1:<your shellhub http port>; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_read_timeout 86400; }","title":"Configure NGINX to proxy Websocket connections"},{"location":"admin-manual/running/","text":"ShellHub provides a docker-compose file that will set up and run everything for you on a single host. Running ShellHub in a multi-host environment with Kubernetes or Docker Swarm is beyond the scope of this guide. To run ShellHub you can just simply run the following command of ShellHub project dir: make start Be patient, it can take up to 10 minutes for the first time When ShellHub server is up and running, you access the Web UI on http://localhost .","title":"Running"},{"location":"admin-manual/updating/","text":"We actively develop ShellHub to add new features and remove bugs, and encourage you to ensure your ShellHub self-hosted instance is using the most up-to-date version. Steps \u00b6 Change to ShellHub working directory Stop the instance: make stop (use ./bin/docker-compose stop if you are running a version prior to v0.6.0 ) Fetch remote changes: git remote update origin Checkout the latest stable release: git checkout v0.9.4 Upgrade MongoDB (If you're running ShellHub for the very first time, simply skip this step) Bring up the instance: make start MongoDB upgrading instructions \u00b6 Starting from ShellHub v0.6.0 , MongoDB has been updated to 4.4 series. If you're running ShellHub for the very first time, simply skip the section. However, if you have been using ShellHub for a while, you have to upgrade the MongoDB data files before attemping an upgrade ShellHub itself. Initially, ShellHub was using MongoDB 3.4 series. To upgrade its data files to 4.4 series, you need to run the MongoDB upgrade script by running the following command: make upgrade_mongodb Make sure to backup all MongoDB data files before proceeding with upgrade","title":"Updating"},{"location":"admin-manual/updating/#steps","text":"Change to ShellHub working directory Stop the instance: make stop (use ./bin/docker-compose stop if you are running a version prior to v0.6.0 ) Fetch remote changes: git remote update origin Checkout the latest stable release: git checkout v0.9.4 Upgrade MongoDB (If you're running ShellHub for the very first time, simply skip this step) Bring up the instance: make start","title":"Steps"},{"location":"admin-manual/updating/#mongodb-upgrading-instructions","text":"Starting from ShellHub v0.6.0 , MongoDB has been updated to 4.4 series. If you're running ShellHub for the very first time, simply skip the section. However, if you have been using ShellHub for a while, you have to upgrade the MongoDB data files before attemping an upgrade ShellHub itself. Initially, ShellHub was using MongoDB 3.4 series. To upgrade its data files to 4.4 series, you need to run the MongoDB upgrade script by running the following command: make upgrade_mongodb Make sure to backup all MongoDB data files before proceeding with upgrade","title":"MongoDB upgrading instructions"},{"location":"admin-manual/upgrade-enterprise/","text":"Upgrade to Enterprise \u00b6 This section describes how to upgrade from the ShellHub Community Edition to the ShellHub Enterprise. Prerequisites \u00b6 To complete this guide you will need: An O.S. Systems Docker Registry account to pull ShellHub Enterprise containers. A valid ShellHub Enterprise license file. Contact us to get a quote for the Enterprise version Configuring Enterprise \u00b6 Once the Open Source containers of the ShellHub are up and running, let's configure your environment to bring up the ShellHub Enterprise containers. Pull ShellHub Enterprise containers \u00b6 First log in to the O.S. Systems docker registry with your ShellHub Enterprise credentials: docker login docker-registry.ossystems.com.br Update environment config \u00b6 Open the .env.override file inside ShellHub project dir and set the following variables: SHELLHUB_ENTERPRISE=true SHELLHUB_ENTERPRISE_ADMIN_USERNAME=<user> SHELLHUB_ENTERPRISE_ADMIN_PASSWORD=<password> Make sure to replace <user> and <password> with your own values. Restart containers \u00b6 If ShellHub is up and running you need to restart containers by running: make stop make start","title":"Upgrade to Enterprise"},{"location":"admin-manual/upgrade-enterprise/#upgrade-to-enterprise","text":"This section describes how to upgrade from the ShellHub Community Edition to the ShellHub Enterprise.","title":"Upgrade to Enterprise"},{"location":"admin-manual/upgrade-enterprise/#prerequisites","text":"To complete this guide you will need: An O.S. Systems Docker Registry account to pull ShellHub Enterprise containers. A valid ShellHub Enterprise license file. Contact us to get a quote for the Enterprise version","title":"Prerequisites"},{"location":"admin-manual/upgrade-enterprise/#configuring-enterprise","text":"Once the Open Source containers of the ShellHub are up and running, let's configure your environment to bring up the ShellHub Enterprise containers.","title":"Configuring Enterprise"},{"location":"admin-manual/upgrade-enterprise/#pull-shellhub-enterprise-containers","text":"First log in to the O.S. Systems docker registry with your ShellHub Enterprise credentials: docker login docker-registry.ossystems.com.br","title":"Pull ShellHub Enterprise containers"},{"location":"admin-manual/upgrade-enterprise/#update-environment-config","text":"Open the .env.override file inside ShellHub project dir and set the following variables: SHELLHUB_ENTERPRISE=true SHELLHUB_ENTERPRISE_ADMIN_USERNAME=<user> SHELLHUB_ENTERPRISE_ADMIN_PASSWORD=<password> Make sure to replace <user> and <password> with your own values.","title":"Update environment config"},{"location":"admin-manual/upgrade-enterprise/#restart-containers","text":"If ShellHub is up and running you need to restart containers by running: make stop make start","title":"Restart containers"},{"location":"cloud/","text":"ShellHub Cloud is a cloud hosted service developed and maintained by O.S. Systems using DigitalOcean Kubernetes to deliver a highly resilient, secure, and scalable environment to provide access to Linux devices behind firewall. Besides the ease of setup and maintenance, ShellHUb Cloud offers a bunch of additional features: Firewall for filtering SSH connections SSL traffic encryption SSH session recording and playback","title":"Introduction"},{"location":"cloud/security/","text":"ShellHub takes your device's fleet security very seriously. We understand that remote access to your devices are critical, and we take precautions to avoid unwanted access to your devices. SSL encryption \u00b6 ShellHub Cloud uses the Secure Socket Layer (SSL) protocol to encrypt all data between the client (your browser), the agent (on your device) and the server. In the event that someone is trying to intercept your traffic to our server, they can only see encrypted information. Password security \u00b6 ShellHub Web UI \u00b6 The passwords you are using to access ShellHub Web UI are one-way encrypted and stored securely in our database. Only you know your password - even we can't use the information in any way. One-way encryption means that it is impossible for anyone to decrypt your password using the information in our database.","title":"Security"},{"location":"cloud/security/#ssl-encryption","text":"ShellHub Cloud uses the Secure Socket Layer (SSL) protocol to encrypt all data between the client (your browser), the agent (on your device) and the server. In the event that someone is trying to intercept your traffic to our server, they can only see encrypted information.","title":"SSL encryption"},{"location":"cloud/security/#password-security","text":"","title":"Password security"},{"location":"cloud/security/#shellhub-web-ui","text":"The passwords you are using to access ShellHub Web UI are one-way encrypted and stored securely in our database. Only you know your password - even we can't use the information in any way. One-way encryption means that it is impossible for anyone to decrypt your password using the information in our database.","title":"ShellHub Web UI"},{"location":"getting-started/connecting-device/","text":"ShellHub provides different connection methods: Web-based SSH client within the ShellHub UI (Chrome, Firefox) Traditional command line SSH client (Linux, Mac OS X) Any GUI SSH client like PuTTY (Windows) Open the ShellHub UI and login using a valid account credentials. Once you are logged in, navigate Devices on the sidebar and follow instructions for a supported connection method: Web-based SSH client \u00b6 In the Devices page, choose the device you wish to connect to and click on terminal icon at the row. A dialog will pop up prompting you for the username and password of an existing user on the device's operating system. After providing credentials, click on Connect button. Command line SSH client \u00b6 To connect to your device using a command line SSH client, you need to know its SSHID address. In the Devices page, choose the device you want to connect to and copy the device's SSHID address. Then, run the following command on your terminal: ssh <USER>@<SSHID> Make sure to replace <USER> with the existing user on the device's operating system and <SSHID> with the SSHID copied before. <SSHID> is composed of <device name>@<server address> . The server address has an additional @, characteristic of ShellHub syntax. PuTTY GUI SSH client \u00b6 Connecting to your device using a GUI SSH client also requires its SSHID address. In the Devices page, choose the device you want to connect to and copy the device's SSHID address. Open Putty and fill in with the following information: Host Name (or IP address): <USER> @ <SSHID> Port: 22 Connection type: SSH Make sure to replace <USER> with the existing user on the device's operating system and <SSHID> with the SSHID copied before.","title":"Connecting to a device"},{"location":"getting-started/connecting-device/#web-based-ssh-client","text":"In the Devices page, choose the device you wish to connect to and click on terminal icon at the row. A dialog will pop up prompting you for the username and password of an existing user on the device's operating system. After providing credentials, click on Connect button.","title":"Web-based SSH client"},{"location":"getting-started/connecting-device/#command-line-ssh-client","text":"To connect to your device using a command line SSH client, you need to know its SSHID address. In the Devices page, choose the device you want to connect to and copy the device's SSHID address. Then, run the following command on your terminal: ssh <USER>@<SSHID> Make sure to replace <USER> with the existing user on the device's operating system and <SSHID> with the SSHID copied before. <SSHID> is composed of <device name>@<server address> . The server address has an additional @, characteristic of ShellHub syntax.","title":"Command line SSH client"},{"location":"getting-started/connecting-device/#putty-gui-ssh-client","text":"Connecting to your device using a GUI SSH client also requires its SSHID address. In the Devices page, choose the device you want to connect to and copy the device's SSHID address. Open Putty and fill in with the following information: Host Name (or IP address): <USER> @ <SSHID> Port: 22 Connection type: SSH Make sure to replace <USER> with the existing user on the device's operating system and <SSHID> with the SSHID copied before.","title":"PuTTY GUI SSH client"},{"location":"getting-started/creating-account/","text":"In order to use ShellHub, you will need a ShellHub account. ShellHub Cloud If you intended to use ShellHub Cloud , you can skip this step filling the register form . If you are using ShellHub self-hosted, you need to manually create account running the add-user script from the ShellHub working directory: ./bin/add-user <username> <password> <email> In ShellHub self-hosted, each account manage their own fleet of devices. Thus, devices registered in one account belongs to their specific namespace and are not available in other accounts.","title":"Creating account"},{"location":"getting-started/creating-namespace/","text":"We are almost done with your account setup process. Now you need to create a namespace for your account by running: ./bin/add-namespace <namespace> <owner> Make sure to replace <owner> with your account username and <namespace> with a valid RFC1123 hostname format.","title":"Creating namespace"},{"location":"getting-started/installing/","text":"This tutorial will guide you through the steps needed to install and run a self-hosted instance of ShellHub on your local machine or on IaaS providers like AWS, Azure, Google Cloud or Digital Ocean. ShellHub Cloud If you prefer to use the cloud hosted service of ShellHub instead of self-hosting your own instance, you can skip this step and go to next step for creating an account in ShellHub Cloud . ShellHub is designed using the microservices design pattern, so that multiple small and isolated services collaborate to provide the server. In order to make it easier to test ShellHub and its features, we have created a Docker Compose environment that brings all of these components up and connects them together on a single machine. System Requirements \u00b6 Before continuing, make sure: Docker Engine and Docker Compose are installed properly. Following ports are open: TCP 80 and TCP 22 . Checkout the latest stable version \u00b6 First checkout the latest stable version ( v0.9.4 ) of ShellHub as follows: git clone -b v0.9.4 https://github.com/shellhub-io/shellhub.git shellhub Now navigate to ShellHub working directory: cd shellhub Generate keys \u00b6 It is required to generate a key pair (private and public) for your ShellHub server instance. make keygen Running \u00b6 make start Be patient, it can take up to 10 minutes for the first time When ShellHub server is up and running, you access the Web UI on http://localhost . When running in production you should ensure that you enable SSL This is commonly achieved by running Nginx with your certificates on your Docker host, service or load balancers in-front of the running container. Next steps \u00b6 Creating account for creating the initial user Registering a device for registering your first device Connecting to a device for connecting to your device","title":"Installing"},{"location":"getting-started/installing/#system-requirements","text":"Before continuing, make sure: Docker Engine and Docker Compose are installed properly. Following ports are open: TCP 80 and TCP 22 .","title":"System Requirements"},{"location":"getting-started/installing/#checkout-the-latest-stable-version","text":"First checkout the latest stable version ( v0.9.4 ) of ShellHub as follows: git clone -b v0.9.4 https://github.com/shellhub-io/shellhub.git shellhub Now navigate to ShellHub working directory: cd shellhub","title":"Checkout the latest stable version"},{"location":"getting-started/installing/#generate-keys","text":"It is required to generate a key pair (private and public) for your ShellHub server instance. make keygen","title":"Generate keys"},{"location":"getting-started/installing/#running","text":"make start Be patient, it can take up to 10 minutes for the first time When ShellHub server is up and running, you access the Web UI on http://localhost . When running in production you should ensure that you enable SSL This is commonly achieved by running Nginx with your certificates on your Docker host, service or load balancers in-front of the running container.","title":"Running"},{"location":"getting-started/installing/#next-steps","text":"Creating account for creating the initial user Registering a device for registering your first device Connecting to a device for connecting to your device","title":"Next steps"},{"location":"getting-started/registering-device/","text":"In order to register a device on ShellHub, you need to install ShellHub agent onto it. The easiest way to install ShellHub agent is with our automatic one-line installation script, which works with all Linux distributions that have Docker installed and properly set up. The other way to install ShellHub agent is build it from the source code by yourself or if you are targeting embedded devices checkout our Yocto Project support layer for ShellHub . When you first login to ShellHub UI, you will be prompted to complete our QuickStart Wizard. This will guide you through the device setup process to ensure that your device has successfully enrolled into your ShellHub account.","title":"Registering a device"},{"location":"reference/agent/configuring/","text":"All configuration is done via environment variables. Environment Variables \u00b6 SHELLHUB_SERVER_ADDRESS \u00b6 Set the ShellHub Cloud server address the agent will use to connect. SHELLHUB_PRIVATE_KEY \u00b6 Specify the path to the device private key SHELLHUB_TENANT_ID \u00b6 Sets the tenant id used during communication to associate the device to a specific namespace. SHELLHUB_KEEPALIVE_INTERVAL \u00b6 Determine the interval to send the keep alive message to the server. SHELLHUB_PREFERRED_HOSTNAME \u00b6 This provides a hint to the server to use this as hostname if it is available.","title":"Configuring"},{"location":"reference/agent/configuring/#environment-variables","text":"","title":"Environment Variables"},{"location":"reference/agent/configuring/#shellhub_server_address","text":"Set the ShellHub Cloud server address the agent will use to connect.","title":"SHELLHUB_SERVER_ADDRESS"},{"location":"reference/agent/configuring/#shellhub_private_key","text":"Specify the path to the device private key","title":"SHELLHUB_PRIVATE_KEY"},{"location":"reference/agent/configuring/#shellhub_tenant_id","text":"Sets the tenant id used during communication to associate the device to a specific namespace.","title":"SHELLHUB_TENANT_ID"},{"location":"reference/agent/configuring/#shellhub_keepalive_interval","text":"Determine the interval to send the keep alive message to the server.","title":"SHELLHUB_KEEPALIVE_INTERVAL"},{"location":"reference/agent/configuring/#shellhub_preferred_hostname","text":"This provides a hint to the server to use this as hostname if it is available.","title":"SHELLHUB_PREFERRED_HOSTNAME"},{"location":"reference/agent/installing/","text":"We offer different ways to install the ShellHub Agent. The easiest way is with our automatic one-line installation script , which works with all major Linux distributions but it requires that you have Docker installed and properly set up. If you want to install ShellHub Agent without Docker, currently we have two other options: Installing from source code Integrate into an existing Yocto Project image Automatic one-line installation script \u00b6 Prerequisites Docker installed and properly set up on device is required. Follow the Docker Install Instructions for your distro/platform. You should always use the latest docker version. The minimum supported Docker version is 18.06 . To install ShellHub Agent run the following command: sh <(curl -Ss http://<SERVER-ADDRESS>/install.sh?tenant_id=<TENANT-ID>) Where: <SERVER-ADDRESS> : is the ShellHub instance server address <TENANT-ID> : is the Tenant ID of your account Optional URL parameters \u00b6 keepalive_interval : Specifies in seconds the keep alive message interval preferred_hostname : The preferred hostname to use rather than generated value from ethernet MAC address Installing from source code \u00b6 Prerequisites ShellHub Agent requires Go 1.14 to compile, please refer to the official documentation for how to install Go in your system. First checkout the latest stable version ( v0.9.4 ) of ShellHub as follows: git clone -b v0.9.4 https://github.com/shellhub-io/shellhub.git shellhub Next, we need to execute the following command to build ShellHub Agent: cd shellhub/agent go build -ldflags \"-X main.AgentVersion=v0.9.4\" Use file ./agent to check if executable was built. Integrate into an existing Yocto Project image \u00b6 To use ShellHub in a Yocto Project image is necessary to add meta-shellhub layer in your project. git clone git@github.com:shellhub-io/meta-shellhub.git Add the settings below in your local.conf file: CORE_IMAGE_EXTRA_INSTALL += \"packagegroup-shellhub-runtime\" SHELLHUB_TENANT_ID = \"<your tenant id here>\" Where: CORE_IMAGE_EXTRA_INSTALL : this variable will install the ShellHub agent in your image. SHELLHUB_TENANT_ID : needs to be filled with your tenant id. Remember to add the other configurations according to your needs. After this, just generate the desired image. Optional variables \u00b6 SHELLHUB_SERVER_ADDRESS : ShellHub instance server addresss (default: https://cloud.shellhub.io ) Supported Yocto releases \u00b6 Dunfell Zeus Sumo Rocko","title":"Installing"},{"location":"reference/agent/installing/#automatic-one-line-installation-script","text":"Prerequisites Docker installed and properly set up on device is required. Follow the Docker Install Instructions for your distro/platform. You should always use the latest docker version. The minimum supported Docker version is 18.06 . To install ShellHub Agent run the following command: sh <(curl -Ss http://<SERVER-ADDRESS>/install.sh?tenant_id=<TENANT-ID>) Where: <SERVER-ADDRESS> : is the ShellHub instance server address <TENANT-ID> : is the Tenant ID of your account","title":"Automatic one-line installation script"},{"location":"reference/agent/installing/#optional-url-parameters","text":"keepalive_interval : Specifies in seconds the keep alive message interval preferred_hostname : The preferred hostname to use rather than generated value from ethernet MAC address","title":"Optional URL parameters"},{"location":"reference/agent/installing/#installing-from-source-code","text":"Prerequisites ShellHub Agent requires Go 1.14 to compile, please refer to the official documentation for how to install Go in your system. First checkout the latest stable version ( v0.9.4 ) of ShellHub as follows: git clone -b v0.9.4 https://github.com/shellhub-io/shellhub.git shellhub Next, we need to execute the following command to build ShellHub Agent: cd shellhub/agent go build -ldflags \"-X main.AgentVersion=v0.9.4\" Use file ./agent to check if executable was built.","title":"Installing from source code"},{"location":"reference/agent/installing/#integrate-into-an-existing-yocto-project-image","text":"To use ShellHub in a Yocto Project image is necessary to add meta-shellhub layer in your project. git clone git@github.com:shellhub-io/meta-shellhub.git Add the settings below in your local.conf file: CORE_IMAGE_EXTRA_INSTALL += \"packagegroup-shellhub-runtime\" SHELLHUB_TENANT_ID = \"<your tenant id here>\" Where: CORE_IMAGE_EXTRA_INSTALL : this variable will install the ShellHub agent in your image. SHELLHUB_TENANT_ID : needs to be filled with your tenant id. Remember to add the other configurations according to your needs. After this, just generate the desired image.","title":"Integrate into an existing Yocto Project image"},{"location":"reference/agent/installing/#optional-variables","text":"SHELLHUB_SERVER_ADDRESS : ShellHub instance server addresss (default: https://cloud.shellhub.io )","title":"Optional variables"},{"location":"reference/agent/installing/#supported-yocto-releases","text":"Dunfell Zeus Sumo Rocko","title":"Supported Yocto releases"},{"location":"support/faq/","text":"Frequentely Asked Questions \u00b6 What is ShellHub? \u00b6 ShellHub is a modern SSH server for remotely accessing Linux devices via CLI or web-based user interface, it avoids the inconvenience such as firewall and NAT when getting your IP address, automating the access process, and helping you easily, seamlessly and securely connect your device to the internet. Does ShellHub support my device? \u00b6 ShellHub is compatible with Linux devices of any hardware architecture, from single-board computers to desktop, as long as the device has Docker installed. Who should use the ShellHub? \u00b6 ShellHub is useful for anyone who needs to access their devices safely through a practical and simple process. What ShellHub flavors are available? \u00b6 ShellHub has two flavors: the ShellHub Open Source and the ShellHub Cloud. And yeah, the Open Source version is fully Free Software and will always be kept that way. We welcome any kind of contribution to our project, so please feel welcome. What is the difference between ShellHub Open Source and ShellHub Cloud version? \u00b6 ShellHub agent is the same in both versions. The difference resides in features implemented on ShellHub Cloud, which includes technical support, managing firewall rules, session log record, and others that are still under development. Installing the ShellHub \u00b6 How do I use ShellHub? \u00b6 Register yourself on ShellHub to create an account. After you've registered, you will be on the dashboard. In dashboard the tenant-id is available at the top right of the screen and will be used to authenticate your device when it connects to the server. This identification must be configured inside the agent (ShellHub client) that will be saved in the device along with the image or it must be added as a Docker container. By default, ShellHub uses Docker to run the agent , but it's possible to install ShellHub from the source code , or even integrate ShellHub agent into the existing Yocto Project image . Take a look at the tutorial, choose the best for you, and have fun! What knowledge do I need to install ShellHub in my device? \u00b6 Depending on the installation, different skill sets are needed. ShellHub installation is easy. But if you don't have experience in code, we suggest our step-by-step using Docker . Why does ShellHub use Docker? \u00b6 By default, ShellHub uses Docker to run the agent, which is very convenient, as it provides frictionless addition of devices on the existing system, with Docker support being the only requirement. Docker is also an easy and convenient way to install ShellHub, but not the only one. Please, check the user manual for more. Do I need to have Docker to install the ShellHub agent? \u00b6 No. It\u2019s possible to install ShellHub from the source code , or if you use Yocto Project , it\u2019s possible to integrate ShellHub into a ready image. Please check the user manual for more details. I work with low power devices such as RaspberryPi, Thinker Board, and others. Is it possible to install the ShellHub agent on them? \u00b6 Yes. You can use ShellHub to access virtually any hardware architecture. For low-end devices, take a look at installing from the source code and integrate with an existing Yocto Project image documentation sections for ways to do the integration for this kind of device. Using the ShellHub \u00b6 My device does not show up in the ShellHub server. What should I do? \u00b6 First of all, check the internet connection in the device. Then, verify if the device has the Shellhub agent installed. Finally, verify if the device has been accepted on the user interface as it will require manual acceptance to move from the pending state. In case of problems, contact us on Gitter . Can I use the ShellHub with Balena? \u00b6 Yes, just install ShellHub from the source code . ShellHub Server \u00b6 If I use the \u201cdocker-compose down\u201d command will I lose my data saved on the server? \u00b6 Yes. The docker-compose down command will stop the server and remove containers, networks, volumes, and images created. If you want to use the data stored on this server in the future you must use the docker-compose stop command that stops executing containers without removing them. To restart them just use docker-compose start . See more in Docker documentation . Can I change the HTTP port used by ShellHub? \u00b6 Yes, you can access the .env file and overwrite the door setting SHELLHUB_HTTP_PORT. Devices \u00b6 How to verify if ShellHub is installed? \u00b6 Just type ps -aux | grep \"shellhubio\" in the device\u2019s terminal e confirm the existence of this process. Is it possible to add automation scripts? \u00b6 ShellHub is not an automation tool, as its objective is to provide access in an efficient and simple way. However, it can be used together with other tools that provide automatic processes like Ansible, as long as they use the SSH protocol for the connection. Can I use the same tenant-id on more than one device? \u00b6 Yes, the tenant-id is a way of identifying each user's account, being linked directly to it, and not to the device. You can, for example, generate a Yocto Project image with a tenant id for an entire fleet of devices without problems or leave an operating system with the Docker container installed and configured with a given tenant-id . How can I access my device through ShellHub? \u00b6 Access devices already accepted on the Shellhub server (either Open Source or Cloud) can be done in two ways: on the Devices tab, in the ShellHub server's dashboard, or through the terminal on your workstation, typing user@SSHID (the SSHID is available on dashboard in the Devices tab). Does the device with ShellHub always need a password for the user? \u00b6 Yes, you need a password. It's part of the tool's configuration and a decision that aims at greater security to access. Can I access HTTP/HTTPS in my device? \u00b6 Currently, ShellHub doesn\u2019t support other services (HTTP and HTTPS), only SSH. It\u2019s on our plans to add this kind of feature. As the agent runs inside a container on the device, do I have access to the processes on this device? \u00b6 Yes. The container runs in the privileged mode, so it\u2019s possible to access the processes of the device normally. Security \u00b6 How does ShellHub Cloud guarantee the security of the data accessed? \u00b6 All data stored by ShellHub is maintained by companies specialized in secure storage in the same places that already guarantees the security of data from the other tools and processes of the O.S.Systems . Does ShellHub endanger device security? \u00b6 No way. ShellHub keeps user passwords and devices encrypted so no one can access them besides the user. The access to devices by the device is done only with the username and password. How can I be sure that ShellHub is safe? \u00b6 ShellHub is an open source project, so it's open to contributions from the community and available for constant verification of developers and users. That's why open-source projects are considerably safer. And for this reason, ShellHub agent is the same in both versions: Cloud or Open Source. If you have any questions that are not in the FAQ, are having difficulty and want help, or want to exchange some ideas with our team, access our Gitter and we will be happy with your contact.","title":"Frequently Encountered Issues"},{"location":"support/faq/#frequentely-asked-questions","text":"","title":"Frequentely Asked Questions"},{"location":"support/faq/#what-is-shellhub","text":"ShellHub is a modern SSH server for remotely accessing Linux devices via CLI or web-based user interface, it avoids the inconvenience such as firewall and NAT when getting your IP address, automating the access process, and helping you easily, seamlessly and securely connect your device to the internet.","title":"What is ShellHub?"},{"location":"support/faq/#does-shellhub-support-my-device","text":"ShellHub is compatible with Linux devices of any hardware architecture, from single-board computers to desktop, as long as the device has Docker installed.","title":"Does ShellHub support my device?"},{"location":"support/faq/#who-should-use-the-shellhub","text":"ShellHub is useful for anyone who needs to access their devices safely through a practical and simple process.","title":"Who should use the ShellHub?"},{"location":"support/faq/#what-shellhub-flavors-are-available","text":"ShellHub has two flavors: the ShellHub Open Source and the ShellHub Cloud. And yeah, the Open Source version is fully Free Software and will always be kept that way. We welcome any kind of contribution to our project, so please feel welcome.","title":"What ShellHub flavors are available?"},{"location":"support/faq/#what-is-the-difference-between-shellhub-open-source-and-shellhub-cloud-version","text":"ShellHub agent is the same in both versions. The difference resides in features implemented on ShellHub Cloud, which includes technical support, managing firewall rules, session log record, and others that are still under development.","title":"What is the difference between ShellHub Open Source and ShellHub Cloud version?"},{"location":"support/faq/#installing-the-shellhub","text":"","title":"Installing the ShellHub"},{"location":"support/faq/#how-do-i-use-shellhub","text":"Register yourself on ShellHub to create an account. After you've registered, you will be on the dashboard. In dashboard the tenant-id is available at the top right of the screen and will be used to authenticate your device when it connects to the server. This identification must be configured inside the agent (ShellHub client) that will be saved in the device along with the image or it must be added as a Docker container. By default, ShellHub uses Docker to run the agent , but it's possible to install ShellHub from the source code , or even integrate ShellHub agent into the existing Yocto Project image . Take a look at the tutorial, choose the best for you, and have fun!","title":"How do I use ShellHub?"},{"location":"support/faq/#what-knowledge-do-i-need-to-install-shellhub-in-my-device","text":"Depending on the installation, different skill sets are needed. ShellHub installation is easy. But if you don't have experience in code, we suggest our step-by-step using Docker .","title":"What knowledge do I need to install ShellHub in my device?"},{"location":"support/faq/#why-does-shellhub-use-docker","text":"By default, ShellHub uses Docker to run the agent, which is very convenient, as it provides frictionless addition of devices on the existing system, with Docker support being the only requirement. Docker is also an easy and convenient way to install ShellHub, but not the only one. Please, check the user manual for more.","title":"Why does ShellHub use Docker?"},{"location":"support/faq/#do-i-need-to-have-docker-to-install-the-shellhub-agent","text":"No. It\u2019s possible to install ShellHub from the source code , or if you use Yocto Project , it\u2019s possible to integrate ShellHub into a ready image. Please check the user manual for more details.","title":"Do I need to have Docker to install the ShellHub agent?"},{"location":"support/faq/#i-work-with-low-power-devices-such-as-raspberrypi-thinker-board-and-others-is-it-possible-to-install-the-shellhub-agent-on-them","text":"Yes. You can use ShellHub to access virtually any hardware architecture. For low-end devices, take a look at installing from the source code and integrate with an existing Yocto Project image documentation sections for ways to do the integration for this kind of device.","title":"I work with low power devices such as RaspberryPi, Thinker Board, and others. Is it possible to install the ShellHub agent on them?"},{"location":"support/faq/#using-the-shellhub","text":"","title":"Using the ShellHub"},{"location":"support/faq/#my-device-does-not-show-up-in-the-shellhub-server-what-should-i-do","text":"First of all, check the internet connection in the device. Then, verify if the device has the Shellhub agent installed. Finally, verify if the device has been accepted on the user interface as it will require manual acceptance to move from the pending state. In case of problems, contact us on Gitter .","title":"My device does not show up in the ShellHub server. What should I do?"},{"location":"support/faq/#can-i-use-the-shellhub-with-balena","text":"Yes, just install ShellHub from the source code .","title":"Can I use the ShellHub with Balena?"},{"location":"support/faq/#shellhub-server","text":"","title":"ShellHub Server"},{"location":"support/faq/#if-i-use-the-docker-compose-down-command-will-i-lose-my-data-saved-on-the-server","text":"Yes. The docker-compose down command will stop the server and remove containers, networks, volumes, and images created. If you want to use the data stored on this server in the future you must use the docker-compose stop command that stops executing containers without removing them. To restart them just use docker-compose start . See more in Docker documentation .","title":"If I use the \u201cdocker-compose down\u201d command will I lose my data saved on the server?"},{"location":"support/faq/#can-i-change-the-http-port-used-by-shellhub","text":"Yes, you can access the .env file and overwrite the door setting SHELLHUB_HTTP_PORT.","title":"Can I change the HTTP port used by ShellHub?"},{"location":"support/faq/#devices","text":"","title":"Devices"},{"location":"support/faq/#how-to-verify-if-shellhub-is-installed","text":"Just type ps -aux | grep \"shellhubio\" in the device\u2019s terminal e confirm the existence of this process.","title":"How to verify if ShellHub is installed?"},{"location":"support/faq/#is-it-possible-to-add-automation-scripts","text":"ShellHub is not an automation tool, as its objective is to provide access in an efficient and simple way. However, it can be used together with other tools that provide automatic processes like Ansible, as long as they use the SSH protocol for the connection.","title":"Is it possible to add automation scripts?"},{"location":"support/faq/#can-i-use-the-same-tenant-id-on-more-than-one-device","text":"Yes, the tenant-id is a way of identifying each user's account, being linked directly to it, and not to the device. You can, for example, generate a Yocto Project image with a tenant id for an entire fleet of devices without problems or leave an operating system with the Docker container installed and configured with a given tenant-id .","title":"Can I use the same tenant-id on more than one device?"},{"location":"support/faq/#how-can-i-access-my-device-through-shellhub","text":"Access devices already accepted on the Shellhub server (either Open Source or Cloud) can be done in two ways: on the Devices tab, in the ShellHub server's dashboard, or through the terminal on your workstation, typing user@SSHID (the SSHID is available on dashboard in the Devices tab).","title":"How can I access my device through ShellHub?"},{"location":"support/faq/#does-the-device-with-shellhub-always-need-a-password-for-the-user","text":"Yes, you need a password. It's part of the tool's configuration and a decision that aims at greater security to access.","title":"Does the device with ShellHub always need a password for the user?"},{"location":"support/faq/#can-i-access-httphttps-in-my-device","text":"Currently, ShellHub doesn\u2019t support other services (HTTP and HTTPS), only SSH. It\u2019s on our plans to add this kind of feature.","title":"Can I access HTTP/HTTPS in my device?"},{"location":"support/faq/#as-the-agent-runs-inside-a-container-on-the-device-do-i-have-access-to-the-processes-on-this-device","text":"Yes. The container runs in the privileged mode, so it\u2019s possible to access the processes of the device normally.","title":"As the agent runs inside a container on the device, do I have access to the processes on this device?"},{"location":"support/faq/#security","text":"","title":"Security"},{"location":"support/faq/#how-does-shellhub-cloud-guarantee-the-security-of-the-data-accessed","text":"All data stored by ShellHub is maintained by companies specialized in secure storage in the same places that already guarantees the security of data from the other tools and processes of the O.S.Systems .","title":"How does ShellHub Cloud guarantee the security of the data accessed?"},{"location":"support/faq/#does-shellhub-endanger-device-security","text":"No way. ShellHub keeps user passwords and devices encrypted so no one can access them besides the user. The access to devices by the device is done only with the username and password.","title":"Does ShellHub endanger device security?"},{"location":"support/faq/#how-can-i-be-sure-that-shellhub-is-safe","text":"ShellHub is an open source project, so it's open to contributions from the community and available for constant verification of developers and users. That's why open-source projects are considerably safer. And for this reason, ShellHub agent is the same in both versions: Cloud or Open Source. If you have any questions that are not in the FAQ, are having difficulty and want help, or want to exchange some ideas with our team, access our Gitter and we will be happy with your contact.","title":"How can I be sure that ShellHub is safe?"},{"location":"support/troubleshooting/","text":"In case you're experiencing problems with using ShellHub, here is a list of solutions to some frequently encountered issues. If this page doesn't help you solve your problem, try doing a search on GitHub Issues . Cannot start service ssh \u00b6 Error message ERROR: for shellhub_ssh_1 Cannot start service ssh: driver failed programming external connectivity on endpoint shellhub_ssh_1: Error starting userland proxy: listen tcp 0.0.0.0:22: bind: address already in use If you have getting the error message above when starting up the server using docker-compose you have two options to solve this issue: Change the OpenSSH daemon port from 22 to whatever on your host machine; Change the default SSH gateway port of ShellHub by setting SHELLHUB_SSH_PORT variable inside the configuration file. Cannot start gateway \u00b6 Error message ERROR: for gateway Cannot start service gateway: driver failed programming external connectivity on endpoint shellhub_gateway_1: Error starting userland proxy: listen tcp 0.0.0.0:80: listen: address already in use If you get the error message above, then check you have no other running process using the port 80 with the following command: sudo lsof -i -P -n | grep :80 If so, kill the service, for example, if apache2 is running: sudo systemctl stop apache2 And disable it from autostart: sudo update-rc.d apache2 disable My SSHID keeps changing every boot when using Ethernet over USB \u00b6 One common reason for this to happen is when using Ethernet over USB. This happens automatically on Raspberry Pi OS for example as the Raspberry Pi Zero has no Ethernet hardware, so there is no hard-coded Ethernet MAC address. An workaround for the issue is to use the last MAC as a static one. This can be done using following code: echo 'options g_ether host_addr='$(dmesg | awk '/: HOST MAC/{print $NF}')' dev_addr='$(dmesg | awk '/: MAC/{print $NF}') | sudo tee /etc/modprobe.d/g_ether.conf","title":"Troubleshooting"},{"location":"support/troubleshooting/#cannot-start-service-ssh","text":"Error message ERROR: for shellhub_ssh_1 Cannot start service ssh: driver failed programming external connectivity on endpoint shellhub_ssh_1: Error starting userland proxy: listen tcp 0.0.0.0:22: bind: address already in use If you have getting the error message above when starting up the server using docker-compose you have two options to solve this issue: Change the OpenSSH daemon port from 22 to whatever on your host machine; Change the default SSH gateway port of ShellHub by setting SHELLHUB_SSH_PORT variable inside the configuration file.","title":"Cannot start service ssh"},{"location":"support/troubleshooting/#cannot-start-gateway","text":"Error message ERROR: for gateway Cannot start service gateway: driver failed programming external connectivity on endpoint shellhub_gateway_1: Error starting userland proxy: listen tcp 0.0.0.0:80: listen: address already in use If you get the error message above, then check you have no other running process using the port 80 with the following command: sudo lsof -i -P -n | grep :80 If so, kill the service, for example, if apache2 is running: sudo systemctl stop apache2 And disable it from autostart: sudo update-rc.d apache2 disable","title":"Cannot start gateway"},{"location":"support/troubleshooting/#my-sshid-keeps-changing-every-boot-when-using-ethernet-over-usb","text":"One common reason for this to happen is when using Ethernet over USB. This happens automatically on Raspberry Pi OS for example as the Raspberry Pi Zero has no Ethernet hardware, so there is no hard-coded Ethernet MAC address. An workaround for the issue is to use the last MAC as a static one. This can be done using following code: echo 'options g_ether host_addr='$(dmesg | awk '/: HOST MAC/{print $NF}')' dev_addr='$(dmesg | awk '/: MAC/{print $NF}') | sudo tee /etc/modprobe.d/g_ether.conf","title":"My SSHID keeps changing every boot when using Ethernet over USB"},{"location":"user-manual/","text":"This manual covers usage of the ShellHub Agent and ShellHub UI.","title":"Introduction"},{"location":"user-manual/adding-device/","text":"Before beginning, you need to have the ShellHub account because the TENANT_ID only is generated and will stay available with an account. You will need this information in settings on the device. In case you don't have an account yet, access ShellHub platform, and register yourself. Now you must put the ShellHub agent in a device. The agent can be added in a device for three ways like shown in Instaling : with Docker , manually , or in a Yocto Project image . After install the ShellHub agent on your device, you'll need to accept the device on the ShellHub UI in order to complete enrollment. Go to Devices -> Pending locate your device and click Accept button. After your device is enrolled, it becomes available in Device List page.","title":"Adding device"},{"location":"user-manual/managing-firewall-rules/","text":"NOTE This feature is only available in ShellHub Cloud . ShellHub provides flexible firewall for filtering SSH connections. It gives a fine-grained control over which SSH connections reach the devices. Using Firewall Rules you can deny or allow SSH connections from specific IP address to a specific or a group of devices using a given username. Each firewall rule has a priority number which is evaluated in ascending order (starting with the lowest). It's makes a lot easier to manage a large number of firewall rules. You can configure Firewall Rules from the ShellHub UI (see image below). A firewall rule is composed of the following parameters: Active : Indicates if the rule is active Priority : The rule's priority Action : Firewall action to perform (allow or deny) Source IP : Incoming connection's source IP address (regexp format) Username : Incoming connection's target username (regexp format) Hostname : Incoming connection's target device's hostname (regexp format) Pay attention The following parameters has support for regular expression: Source IP , Username , Hostname . Make sure to escape the periods in the value of these parameters.","title":"Managing firewall rules"},{"location":"user-manual/session-recording/","text":"NOTE This feature is only available in ShellHub Cloud and self-hosted Enterprise . By default, ShellHub records all interactive SSH sessions, which includes all of the user activity that occurs during the session. Once recorded, it can be played back as a video by namespace's owner in the Web UI. Playing recorded session \u00b6 Go to Sessions , locate the session you want to playback and click in the play button at the Actions column. Session Player","title":"Session recording"},{"location":"user-manual/session-recording/#playing-recorded-session","text":"Go to Sessions , locate the session you want to playback and click in the play button at the Actions column. Session Player","title":"Playing recorded session"},{"location":"user-manual/agent/configuring/","text":"All configuration is done via environment variables. Environment Variables \u00b6 SHELLHUB_SERVER_ADDRESS \u00b6 Set the ShellHub Cloud server address the agent will use to connect. SHELLHUB_PRIVATE_KEY \u00b6 Specify the path to the device private key SHELLHUB_TENANT_ID \u00b6 Sets the tenant id used during communication to associate the device to a specific namespace. SHELLHUB_KEEPALIVE_INTERVAL \u00b6 Determine the interval to send the keep alive message to the server. SHELLHUB_PREFERRED_HOSTNAME \u00b6 This provides a hint to the server to use this as hostname if it is available.","title":"Configuring"},{"location":"user-manual/agent/configuring/#environment-variables","text":"","title":"Environment Variables"},{"location":"user-manual/agent/configuring/#shellhub_server_address","text":"Set the ShellHub Cloud server address the agent will use to connect.","title":"SHELLHUB_SERVER_ADDRESS"},{"location":"user-manual/agent/configuring/#shellhub_private_key","text":"Specify the path to the device private key","title":"SHELLHUB_PRIVATE_KEY"},{"location":"user-manual/agent/configuring/#shellhub_tenant_id","text":"Sets the tenant id used during communication to associate the device to a specific namespace.","title":"SHELLHUB_TENANT_ID"},{"location":"user-manual/agent/configuring/#shellhub_keepalive_interval","text":"Determine the interval to send the keep alive message to the server.","title":"SHELLHUB_KEEPALIVE_INTERVAL"},{"location":"user-manual/agent/configuring/#shellhub_preferred_hostname","text":"This provides a hint to the server to use this as hostname if it is available.","title":"SHELLHUB_PREFERRED_HOSTNAME"},{"location":"user-manual/agent/installing/","text":"Note This is an advanced reference guide of alternate install methods. For adding a device to ShellHub, see Adding a device . We offer different ways to install the ShellHub Agent. The easiest way is with our automatic one-line installation script , which works with all major Linux distributions but it requires that you have Docker installed and properly set up. If you want to install ShellHub Agent without Docker, currently we have two other options: Installing from source code Integrate into an existing Yocto Project image Automatic one-line installation script \u00b6 Prerequisites Docker installed and properly set up on device is required. Follow the Docker Install Instructions for your distro/platform. You should always use the latest docker version. The minimum supported Docker version is 18.06 . To install ShellHub Agent run the following command: sh <(curl -Ss http://<SERVER-ADDRESS>/install.sh?tenant_id=<TENANT-ID>) Where: <SERVER-ADDRESS> : is the ShellHub instance server address <TENANT-ID> : is the Tenant ID of your account Optional URL parameters \u00b6 keepalive_interval : Specifies in seconds the keep alive message interval preferred_hostname : The preferred hostname to use rather than generated value from ethernet MAC address Installing from source code \u00b6 Prerequisites ShellHub Agent requires Go 1.14 to compile, please refer to the official documentation for how to install Go in your system. First checkout the latest stable version ( v0.9.4 ) of ShellHub as follows: git clone -b v0.9.4 https://github.com/shellhub-io/shellhub.git shellhub Next, we need to execute the following command to build ShellHub Agent: cd shellhub/agent go build -ldflags \"-X main.AgentVersion=v0.9.4\" Use file ./agent to check if executable was built. Integrate into an existing Yocto Project image \u00b6 To use ShellHub in a Yocto Project image is necessary to add meta-shellhub layer in your project. git clone git@github.com:shellhub-io/meta-shellhub.git Add the settings below in your local.conf file: CORE_IMAGE_EXTRA_INSTALL += \"packagegroup-shellhub-runtime\" SHELLHUB_TENANT_ID = \"<your tenant id here>\" Where: CORE_IMAGE_EXTRA_INSTALL : this variable will install the ShellHub agent in your image. SHELLHUB_TENANT_ID : needs to be filled with your tenant id. Remember to add the other configurations according to your needs. After this, just generate the desired image. Optional variables \u00b6 SHELLHUB_SERVER_ADDRESS : ShellHub instance server addresss (default: https://cloud.shellhub.io ) Supported Yocto releases \u00b6 Dunfell Zeus Sumo Rocko","title":"Installing agent"},{"location":"user-manual/agent/installing/#automatic-one-line-installation-script","text":"Prerequisites Docker installed and properly set up on device is required. Follow the Docker Install Instructions for your distro/platform. You should always use the latest docker version. The minimum supported Docker version is 18.06 . To install ShellHub Agent run the following command: sh <(curl -Ss http://<SERVER-ADDRESS>/install.sh?tenant_id=<TENANT-ID>) Where: <SERVER-ADDRESS> : is the ShellHub instance server address <TENANT-ID> : is the Tenant ID of your account","title":"Automatic one-line installation script"},{"location":"user-manual/agent/installing/#optional-url-parameters","text":"keepalive_interval : Specifies in seconds the keep alive message interval preferred_hostname : The preferred hostname to use rather than generated value from ethernet MAC address","title":"Optional URL parameters"},{"location":"user-manual/agent/installing/#installing-from-source-code","text":"Prerequisites ShellHub Agent requires Go 1.14 to compile, please refer to the official documentation for how to install Go in your system. First checkout the latest stable version ( v0.9.4 ) of ShellHub as follows: git clone -b v0.9.4 https://github.com/shellhub-io/shellhub.git shellhub Next, we need to execute the following command to build ShellHub Agent: cd shellhub/agent go build -ldflags \"-X main.AgentVersion=v0.9.4\" Use file ./agent to check if executable was built.","title":"Installing from source code"},{"location":"user-manual/agent/installing/#integrate-into-an-existing-yocto-project-image","text":"To use ShellHub in a Yocto Project image is necessary to add meta-shellhub layer in your project. git clone git@github.com:shellhub-io/meta-shellhub.git Add the settings below in your local.conf file: CORE_IMAGE_EXTRA_INSTALL += \"packagegroup-shellhub-runtime\" SHELLHUB_TENANT_ID = \"<your tenant id here>\" Where: CORE_IMAGE_EXTRA_INSTALL : this variable will install the ShellHub agent in your image. SHELLHUB_TENANT_ID : needs to be filled with your tenant id. Remember to add the other configurations according to your needs. After this, just generate the desired image.","title":"Integrate into an existing Yocto Project image"},{"location":"user-manual/agent/installing/#optional-variables","text":"SHELLHUB_SERVER_ADDRESS : ShellHub instance server addresss (default: https://cloud.shellhub.io )","title":"Optional variables"},{"location":"user-manual/agent/installing/#supported-yocto-releases","text":"Dunfell Zeus Sumo Rocko","title":"Supported Yocto releases"},{"location":"user-manual/devices/adding/","text":"In order to register a device on ShellHub, you need to install ShellHub agent onto it. The easiest way to install ShellHub agent is with our automatic one-line installation script, which works with all Linux distributions that have Docker installed and properly set up. Tip For more information about other install methods, see Installing Agent from Developer's Manual. From the Devices page, click Add Device button and follow instructions.","title":"Adding a device"},{"location":"user-manual/devices/connecting/","text":"You can establish an SSH connection to a device from the Devices page. Tip For more information about other connection methods, see Alternate connection method section below. From Devices page, choose the device you wish to connect to and click on terminal icon. A dialog will pop up prompting you for the username and password of an existing user on the device's operating system. After providing credentials, click on Connect button. Alternate connection method \u00b6 ShellHub is compatible with any SSH client that supports a minimum of SSH version 2.0. Command line SSH Client \u00b6 To connect to your device using a command line SSH client, you need to know its SSHID address. From Devices page, choose the device you want to connect to and copy the device's SSHID address. Then, run the following command on your terminal: ssh <USER>@<SSHID> Make sure to replace <USER > with the existing user on the device's operating system and <SSHID> with the SSHID copied before. Desktop and mobile GUI SSH Client \u00b6 Connecting to your device using a GUI SSH client also requires its SSHID address. From Devices page, choose the device you want to connect to and copy the device's SSHID address. PuTTY instructions \u00b6 Open Putty and fill in with the following information: Field Value Host Name (or IP address) <USER> @ <SSHID> Port 22 Connection type SSH Make sure to replace <USER > with the existing user on the device's operating system and <SSHID> with the SSHID copied before. JuiceSSH instructions \u00b6 Open JuiceSSH, click on Quick Connect button and enter following address: <USER>@<SSHID> Make sure to replace <USER > with the existing user on the device's operating system and <SSHID> with the SSHID copied before.","title":"Connecting to a device"},{"location":"user-manual/devices/connecting/#alternate-connection-method","text":"ShellHub is compatible with any SSH client that supports a minimum of SSH version 2.0.","title":"Alternate connection method"},{"location":"user-manual/devices/connecting/#command-line-ssh-client","text":"To connect to your device using a command line SSH client, you need to know its SSHID address. From Devices page, choose the device you want to connect to and copy the device's SSHID address. Then, run the following command on your terminal: ssh <USER>@<SSHID> Make sure to replace <USER > with the existing user on the device's operating system and <SSHID> with the SSHID copied before.","title":"Command line SSH Client"},{"location":"user-manual/devices/connecting/#desktop-and-mobile-gui-ssh-client","text":"Connecting to your device using a GUI SSH client also requires its SSHID address. From Devices page, choose the device you want to connect to and copy the device's SSHID address.","title":"Desktop and mobile GUI SSH Client"},{"location":"user-manual/devices/connecting/#putty-instructions","text":"Open Putty and fill in with the following information: Field Value Host Name (or IP address) <USER> @ <SSHID> Port 22 Connection type SSH Make sure to replace <USER > with the existing user on the device's operating system and <SSHID> with the SSHID copied before.","title":"PuTTY instructions"},{"location":"user-manual/devices/connecting/#juicessh-instructions","text":"Open JuiceSSH, click on Quick Connect button and enter following address: <USER>@<SSHID> Make sure to replace <USER > with the existing user on the device's operating system and <SSHID> with the SSHID copied before.","title":"JuiceSSH instructions"},{"location":"user-manual/devices/listing/","text":"A device in ShellHub can be physical device such as single-board-computer or a virtual server running on AWS/GCP/Azure. You can browse all devices clicking in Devices on the sidebar.","title":"Listing devices"},{"location":"user-manual/namespaces/overview/","text":"In ShellHub, users manage devices and collaborate in namespaces. A namespace is a group of devices and users that is managed by a namespace's owner. An namespace can have any number of members and devices 1 . The namespace's owner can perform any possible action to the namespace while members have limited access. Warning The namespace must be unique across all ShellHub accounts in the server instance and follow the DNS label standard defined in RFC 1123 . ShellHub Cloud free tier is limited to up to 3 devices per namespace. \u21a9","title":"Overview"},{"location":"user-manual/namespaces/switching/","text":"The active namespace can be seen on the top menu bar, you can switch to another namespace by selecting the name. The current view will be refreshed to display the resources of the selected namespace.","title":"Switching namespace"},{"location":"user-manual/security/managing-firewall-rules/","text":"ShellHub provides flexible firewall for filtering SSH connections. It gives a fine-grained control over which SSH connections reach the devices. Using firewall rules you can deny or allow SSH connections to your devices based on a configuratio that you specify. NOTE This feature is only available in ShellHub Cloud . Firewall rule parameters \u00b6 Each firewall rule has a priority number which is evaluated in ascending order (starting with the lowest). It's makes a lot easier to manage a large number of firewall rules. A firewall rule is composed of the following parameters: Active : Indicates if the rule is active Priority : The rule's priority Action : Firewall action to perform (allow or deny) Source IP : Incoming connection's source IP address (regexp format) Username : Incoming connection's target username (regexp format) Hostname : Incoming connection's target device's hostname (regexp format) Pay attention The following parameters has support for regular expression: Source IP , Username , Hostname . Make sure to escape the periods in the value of these parameters.","title":"Managing firewall rules"},{"location":"user-manual/security/managing-firewall-rules/#firewall-rule-parameters","text":"Each firewall rule has a priority number which is evaluated in ascending order (starting with the lowest). It's makes a lot easier to manage a large number of firewall rules. A firewall rule is composed of the following parameters: Active : Indicates if the rule is active Priority : The rule's priority Action : Firewall action to perform (allow or deny) Source IP : Incoming connection's source IP address (regexp format) Username : Incoming connection's target username (regexp format) Hostname : Incoming connection's target device's hostname (regexp format) Pay attention The following parameters has support for regular expression: Source IP , Username , Hostname . Make sure to escape the periods in the value of these parameters.","title":"Firewall rule parameters"},{"location":"user-manual/security/publickey-authentication/","text":"Public key authentication is a way of logging into an devices using a cryptographic key rather than a password which is the default method most SSH clients use to authenticate with remote devices, but it suffers from potential security vulnerabilities like brute-force login attempts. Using key-based authentication offers a range of benefits: Allow multiple developers to log in as the same system user without having to share a single password between them; Revoke a single developer's access without revoking access by other developers; and Make it easier for a single developer to log in to many accounts without needing to manage many different passwords.","title":"Using public keys for authentication"},{"location":"user-manual/sessions/introduction/","text":"Every time a SSH connection is made to ShellHub a session is created and stored on the server for audit purposes 1 . Following information is stored on the server: Data Description Device Incoming connection's target device Username Incoming connection's target username IP Address Incoming connection's remote IP address Auth Status Whether the connection was authorized Last Activity Session's last activity timestamp In ShellHub Cloud and self-hosted Enterprise , interactive SSH sessions are recorded, which includes all of the user activity that occurs during the session so that it can later be played back. \u21a9","title":"Auditing sessions"},{"location":"user-manual/sessions/replaying/","text":"NOTE This feature is only available in ShellHub Cloud and self-hosted Enterprise . From Sessions page, locate the session you want to playback and click in the play button.","title":"Replaying a recorded session"}]}